T0时刻资源分配情况：
	Max	Allocation Need// Available=2,3,3
P1	5,5,9	2,1,2	3,4,7		
P2	5,3,6	4,0,2	1,3,4	
P3	4,0,11	4,0,5	0,0,6	
P4	4,2,5	2,0,4	2,2,1	
P5	4,2,4	3,1,4	1,1,0	
执行安全性算法；
分配->p4->work=4,3,7->分配->p3->work=8,3,12->分配->p2->work=12,3,14->分配->p5->work=15,4,18->分配->p1->work=17,5,20
∴T0时刻为安全状态且存在安全序列p4,p3,p2,p5,p1;
(2)
P2发出请求Request2 (0,3,4);
系统按银行家算法进行检查：
1）Request2 (0,3,4)≤Need2(1,3,4);满足
2）Request2 (0,3,4)＞Available(2,3,3);不满足
∴不能分配
(3)
P4发出请求Request4(2,0,1)；
系统按银行家算法进行检查：
1）Request4(2,0,1)≤Need4(2,2,1);满足
2）Request4(2,0,1)≤Available(2,3,3);满足
3）试探性分配资源；
Available(2,3,3)- Request4(2,0,1)= Request4(0,3,2);
Allocation4(2,0,4)+ Request4(2,0,1)= Allocation4(4,0,5);
Need4(2,2,1)- Request4(2,0,1)= Need4(0,2,0);
分配后相关；
	Allocation	Need//Available=0,3,2
P1	2,1,2	3,4,7	
P2	4,0,2	1,3,4	
P3	4,0,5	0,0,6	
P4	4,0,5	0,2,0	
P5	3,1,4	1,1,0	
执行安全性算法；
分配->p4->work=4,3,7->分配->p5->work=7,4,11->分配->p1->work=9,5,13->分配->p2->work=13,5,15->分配->p3->work=17,5,20
∴存在安全序列，可以分配；
(4)
P1发出请求Request1(0,2,0)
1）Request1(0,2,0)≤Need1(3,4,7);
2）Request1(0,2,0)≤Available(0,3,2);
3）试探性分配资源；
Available(0,3,2)- Request1(0,2,0)=Available(0,1,2);
Need1(3,4,7)- Request1(0,2,0)= Need1(3,2,7);
Allocation1(2,1,2)+ Request1(0,2,0)= Allocation1(2,3,2);
分配后相关；
	Allocation	Need//Available=0,1,2
P1	2,3,2	3,2,7	
P2	4,0,2	1,3,4	
P3	4,0,5	0,0,6	
P4	4,0,5	0,2,0	
P5	3,1,4	1,1,0	
易知，不存在安全序列；
∴不能分配。
